package Controller;
import DAO.NhanVienDAOplus;
import View.NhanVienCaNhanView2;
import View.NhanVienView1;
import View.ThongBaodialog;
import View.TrangChuView;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

import model.NhanVien;
import view.NhanVienDialog;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class NhanVienControllerplus {
    private TrangChuView mainView;
    private NhanVienView1 nvView;
    private NhanVienDAOplus nvDAO;
    private int ma_nv;
    private NhanVienCaNhanView2 nvcnV2;
    
    public NhanVienControllerplus(TrangChuView mainView,NhanVienCaNhanView2 nvcnV2, int ma_nv){
        this.mainView = mainView;
        this.nvcnV2 = nvcnV2;
        this.nvDAO = new NhanVienDAOplus();
        this.ma_nv = ma_nv;
        nvcnV2.getBtnCapNhat().addActionListener(e -> UpdateTTCN());
    }

    public NhanVienControllerplus(TrangChuView mainView, NhanVienView1 nvView) {
        this.mainView = mainView;
        this.nvView = nvView;
        this.nvDAO = new NhanVienDAOplus();

        nvView.addAddListener(e -> themNhanVien());
        nvView.addDeleteListener(e -> xoaNhanVien());
        nvView.addSearchListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) { timKiem(); }
            @Override
            public void removeUpdate(DocumentEvent e) { timKiem(); }
            @Override
            public void changedUpdate(DocumentEvent e) { timKiem(); }
        });

        nvView.getTable().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    suaNhanVien();
                }
            }
        });

        loadTableData();
    }

    private void loadTableData() {
        DefaultTableModel model = nvView.getTableModel();
        model.setRowCount(0);
        for (NhanVien nv : nvDAO.getAllNhanVien()) {
            model.addRow(new Object[]{
                    false,
                    nv.getma_nv(),          // ho·∫∑c nv.getMaNV() tu·ª≥ thu·ªôc model c·ªßa b·∫°n
                    nv.getHoten(),
                    nv.getCccd(),
                    nv.getSdt(),
                    nv.getChucvu(),
                    nv.getEmail(),
                    nv.getGioitinh(),
                    nv.getGhichu(),
                    NhanVienView1.scaleImageIcon(convertByteArrayToImageIcon(nv.getAnh()), 40, 50)
            });
        }
    }
    public void UpdateTTCN() {
    System.out.println("=== UpdateTTCN ƒë∆∞·ª£c g·ªçi ==="); // Debug log
     try {
        NhanVien nv = new NhanVien();
        nv.setma_nv(Integer.parseInt(nvcnV2.getTxtId().getText()));
        nv.setHoten(nvcnV2.getTxtHoTen().getText());
        nv.setCccd(nvcnV2.getTxtCCCD().getText());
        nv.setSdt(nvcnV2.getTxtSDT().getText());
        nv.setChucvu(nvcnV2.getTxtChucVu().getText());
        nv.setEmail(nvcnV2.getTxtEmail().getText());
        nv.setGhichu(nvcnV2.getTxtGhiChu().getText());
        String gioiTinh = nvcnV2.getRbMr().isSelected() ? "Nam" : "N·ªØ";
        nv.setGioitinh(gioiTinh);
        byte[] anhHienTai = getCurrentImageBytes(); // L·∫•y ·∫£nh hi·ªán t·∫°i
            if (anhHienTai != null) {
                nv.setAnh(anhHienTai);
            } else {
                // N·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi, l·∫•y ·∫£nh c≈© t·ª´ DB
                int maNV = Integer.parseInt(nvcnV2.getTxtId().getText());
                NhanVien nvCu = nvDAO.getNhanVienById(maNV);
                if (nvCu != null) {
                    nv.setAnh(nvCu.getAnh());
                }
            }

            System.out.println("ƒêang c·∫≠p nh·∫≠t nh√¢n vi√™n ID: " + nv.getma_nv());
            boolean success = nvDAO.updateNhanVien(nv);

            if (success) {
                JOptionPane.showMessageDialog(nvcnV2, "C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            } else {
                JOptionPane.showMessageDialog(nvcnV2, "C·∫≠p nh·∫≠t th·∫•t b·∫°i!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(nvcnV2, "M√£ nh√¢n vi√™n kh√¥ng h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(nvcnV2, "L·ªói khi c·∫≠p nh·∫≠t: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    // ‚≠ê Th√™m method helper ƒë·ªÉ l·∫•y ·∫£nh hi·ªán t·∫°i
    private byte[] getCurrentImageBytes() {
        // N·∫øu c√≥ ch·ª©c nƒÉng ch·ªçn ·∫£nh m·ªõi, return ·∫£nh m·ªõi
        // Hi·ªán t·∫°i return null ƒë·ªÉ gi·ªØ nguy√™n ·∫£nh c≈©
        return null;
    }

    private void themNhanVien() {
        NhanVienDialog dialog = new NhanVienDialog(mainView, "Th√™m Nh√¢n Vi√™n");
        dialog.setVisible(true);

        if (dialog.isConfirmed()) {
            // L·∫•y d·ªØ li·ªáu t·ª´ dialog
            String hoTen = dialog.getHoTen();
            String cccd = dialog.getCCCD();
            String soDienThoai = dialog.getSDT();
            String chucvu = dialog.getChucVu();
            String email = dialog.getEmail();
            String gioitinh = dialog.getGioiTinh();
            String ghichu = dialog.getGhiChu();
            byte[] anh = dialog.getImageBytes();  // Ph·∫£i c√≥ ph∆∞∆°ng th·ª©c getAnhBytes() tr·∫£ v·ªÅ byte[] ·∫£nh trong dialog

            // T·∫°o ƒë·ªëi t∆∞·ª£ng NhanVien m·ªõi
            NhanVien nv = new NhanVien(hoTen, cccd, soDienThoai, chucvu, email, gioitinh, ghichu, anh);

            // Th√™m nh√¢n vi√™n qua DAO
            if (nvDAO.insertNhanVien(nv)) {
                // Th√™m v√†o b·∫£ng giao di·ªán
                nvView.getTableModel().addRow(new Object[]{
                        false,
                        nv.getma_nv(),  // ID m·ªõi (n·∫øu tr·∫£ v·ªÅ t·ª´ DB sau khi th√™m)
                        nv.getHoten(),
                        nv.getCccd(),
                        nv.getSdt(),
                        nv.getChucvu(),
                        nv.getEmail(),
                        nv.getGioitinh(),
                        nv.getGhichu(),
                        NhanVienView1.scaleImageIcon(convertByteArrayToImageIcon(nv.getAnh()), 40, 50)
                });
                ThongBaodialog.showsuccessDialog(nvView, "X√°c Nh·∫≠n", "Th√™m th√†nh c√¥ng!");
            } else {
                ThongBaodialog.showErrorDialog(nvView, "L·ªói", "Th√™m th·∫•t b·∫°i!");
            }
        }
    }

   private void suaNhanVien() {
    int row = nvView.getTable().getSelectedRow();
    if (row == -1) {
        ThongBaodialog.showWarningDialog(nvView, "C·∫£nh b√°o", "Ch·ªçn d√≤ng ƒë·ªÉ s·ª≠a!");
        return;
    }

    int ma_nv = (int) nvView.getTableModel().getValueAt(row, 1);

    // üîÅ Truy v·∫•n l·∫°i t·ª´ DAO ƒë·ªÉ l·∫•y ƒë√∫ng byte[] ·∫£nh
    NhanVien nv = nvDAO.getNhanVienById(ma_nv);
    if (nv == null) {
        ThongBaodialog.showErrorDialog(nvView, "L·ªói", "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu nh√¢n vi√™n.");
        return;
    }

    NhanVienDialog dialog = new NhanVienDialog(mainView, "S·ª≠a Nh√¢n Vi√™n");
    dialog.setFields(
        nv.getma_nv(),
        nv.getHoten(),
        nv.getCccd(),
        nv.getSdt(),
        nv.getChucvu(),
        nv.getEmail(),
        nv.getGioitinh(),
        nv.getGhichu(),
        nv.getAnh()  // <-- ·∫£nh th·∫≠t t·ª´ CSDL
    );
    dialog.setVisible(true);

    if (dialog.isConfirmed()) {
        NhanVien updatedNV = new NhanVien(
                ma_nv,
                dialog.getHoTen(),
                dialog.getCCCD(),
                dialog.getSDT(),
                dialog.getChucVu(),
                dialog.getEmail(),
                dialog.getGioiTinh(),
                dialog.getGhiChu(),
                dialog.getImageBytes()
        );

        if (nvDAO.updateNhanVien(updatedNV)) {
            loadTableData();
            ThongBaodialog.showsuccessDialog(nvView, "Th√†nh c√¥ng", "S·ª≠a th√†nh c√¥ng!");
        } else {
            ThongBaodialog.showErrorDialog(nvView, "L·ªói", "S·ª≠a th·∫•t b·∫°i!");
        }
    }
}
   private void xoaNhanVien() {
    DefaultTableModel model = nvView.getTableModel();
    JTable table = nvView.getTable();
    List<Integer> selectedRows = new ArrayList<>();

    // ‚úÖ T√¨m c√°c d√≤ng ƒë√£ ƒë∆∞·ª£c tick ch·ªçn
    for (int i = 0; i < model.getRowCount(); i++) {
        Boolean checked = (Boolean) model.getValueAt(i, 0);
        if (Boolean.TRUE.equals(checked)) {
            selectedRows.add(i);
        }
    }

    if (selectedRows.isEmpty()) {
        int selected = table.getSelectedRow();
        if (selected == -1) {
            ThongBaodialog.showWarningDialog(nvView, "C·∫£nh b√°o", "Ch·ªçn d√≤ng ƒë·ªÉ xo√°!");
            return;
        }

        int modelRow = table.convertRowIndexToModel(selected);
        int ma_nv = (int) model.getValueAt(modelRow, 1);
        boolean confirm = ThongBaodialog.showConfirmDialog(nvView, "X√°c nh·∫≠n xo√°", "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° nh√¢n vi√™n n√†y?");
        if (confirm && nvDAO.deleteNhanVien(ma_nv)) {
            model.removeRow(modelRow);
            ThongBaodialog.showsuccessDialog(nvView, "Xo√°", "Xo√° th√†nh c√¥ng!");
        } else {
            ThongBaodialog.showErrorDialog(nvView, "L·ªói", "Xo√° th·∫•t b·∫°i!");
        }
    } else {
        boolean confirm = ThongBaodialog.showConfirmDialog(nvView, "X√°c nh·∫≠n xo√°", "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° " + selectedRows.size() + " nh√¢n vi√™n?");
        if (confirm) {
            selectedRows.sort((a, b) -> b - a); // Duy·ªát ng∆∞·ª£c
            for (int row : selectedRows) {
                int ma_nv = (int) model.getValueAt(row, 1);
                boolean deleted = nvDAO.deleteNhanVien(ma_nv);
                System.out.println("Xo√° m√£: " + ma_nv + " -> " + deleted);
                if (deleted) {
                    model.removeRow(row);
                }
            }
            ThongBaodialog.showsuccessDialog(nvView, "Xo√°", "ƒê√£ xo√° th√†nh c√¥ng!");
        }
    }
}



    private void timKiem() {
        String keyword = nvView.getSearchText().toLowerCase();
        List<NhanVien> list = nvDAO.searchNhanVien(keyword);
        DefaultTableModel model = nvView.getTableModel();
        model.setRowCount(0);

        for (NhanVien nv : list) {
            model.addRow(new Object[]{
                    false,
                    nv.getma_nv(),
                    nv.getHoten(),
                    nv.getCccd(),
                    nv.getSdt(),
                    nv.getChucvu(),
                    nv.getEmail(),
                    nv.getGioitinh(),
                    nv.getGhichu(),
                    NhanVienView1.scaleImageIcon(convertByteArrayToImageIcon(nv.getAnh()), 40, 50)
            });
        }
    }

    private ImageIcon convertByteArrayToImageIcon(byte[] imageBytes) {
        if (imageBytes == null || imageBytes.length == 0) return null;
        try {
            Image img = Toolkit.getDefaultToolkit().createImage(imageBytes);
            return new ImageIcon(img);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
